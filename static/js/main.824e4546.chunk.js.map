{"version":3,"sources":["game/actions.js","game/card.js","game/board.js","index.js"],"names":["faceUp","value","type","matched","faceDown","Card","flipCard","props","dispatch","index","color","this","deck","backgroundColor","className","onClick","disabled","numFlipped","style","symbol","React","Component","connect","state","Board","createGrid","grid","i","length","push","key","reset","cards","swapIndex","Math","floor","random","temp","setState","score","guesses","prevProps","prevState","snapshot","first","second","localeCompare","setTimeout","initialState","store","createStore","action","map","item","ReactDOM","render","document","getElementById"],"mappings":"oRAAO,SAASA,EAAOC,GACnB,MAAO,CACHC,KAAO,UACPD,SAID,SAASE,EAAQF,GACpB,MAAO,CACHC,KAAO,UACPD,SAID,SAASG,EAASH,GACrB,MAAO,CACHC,KAAO,YACPD,S,UCZFI,E,2MAEFC,SAAW,WACP,EAAKC,MAAMC,SAASR,EAAO,EAAKO,MAAME,S,wEAItC,IAAIC,EAUJ,OARIA,EADsC,IAAtCC,KAAKJ,MAAMK,KAAKD,KAAKJ,MAAME,OACnB,CACJI,gBAAiB,WAGb,CACJA,gBAAiB,WAIrB,4BAAQC,UAAU,OAAOC,QAASJ,KAAKL,SAAUU,SAAgD,IAAtCL,KAAKJ,MAAMK,KAAKD,KAAKJ,MAAME,QAAgBE,KAAKJ,MAAMU,YAAc,EAAGC,MAAOR,GAC7F,IAAtCC,KAAKJ,MAAMK,KAAKD,KAAKJ,MAAME,OAAgBE,KAAKJ,MAAMY,OAAS,S,GAnB9DC,IAAMC,WAgCVC,mBAPf,SAAyBC,GACrB,MAAO,CACHX,KAAOW,EAAMX,KACbK,WAAaM,EAAMN,cAIZK,CAAyBjB,GC/BlCmB,G,kBACF,WAAYjB,GAAQ,IAAD,uBACf,4CAAMA,KAeVkB,WAAa,WAET,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAKJ,MAAMX,KAAKgB,OAAQD,IACxCD,EAAKG,KAAK,kBAAC,EAAD,CAAMV,OAAQ,EAAKI,MAAMX,KAAKe,GAAIlB,MAAOkB,EAAGG,IAAKH,KAE/D,OAAOD,GArBQ,EA6DnBK,MAAQ,WAEJ,IADA,IAAIC,EAAQ,CAAC,SAAK,SAAK,SAAK,SAAI,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAC1DL,EAAI,EAAGA,EAAIK,EAAMJ,OAAQD,IAAK,CACnC,IAAIM,EAAYN,EAAIO,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMJ,OAASD,IAC3DU,EAAOL,EAAML,GACjBK,EAAML,GAAKK,EAAMC,GACjBD,EAAMC,GAAaI,EAEvB,EAAKC,SAAS,CACV1B,KAAOoB,EACPO,MAAO,EACPC,QAAS,IAEb,EAAKjC,MAAMC,SF3DR,CACHN,KAAO,WEbP,IADA,IAAI8B,EAAQ,CAAC,SAAK,SAAK,SAAK,SAAI,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAC1DL,EAAI,EAAGA,EAAIK,EAAMJ,OAAQD,IAAK,CACnC,IAAIM,EAAYN,EAAIO,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMJ,OAASD,IAC3DU,EAAOL,EAAML,GACjBK,EAAML,GAAKK,EAAMC,GACjBD,EAAMC,GAAaI,EAPR,OASf,EAAKd,MAAQ,CACTX,KAAOoB,EACPO,MAAO,EACPC,QAAS,GAZE,E,gFAwBAC,EAAWC,EAAWC,GAAW,IAAD,OAC/C,GAA8B,IAA1BhC,KAAKJ,MAAMU,WAAkB,CAG7B,IAFA,IAAI2B,GAAS,EACTC,GAAU,EACLlB,EAAI,EAAGA,EAAI,GAAIA,IACpB,GAA2B,IAAvBhB,KAAKJ,MAAMK,KAAKe,GAAU,CAC1B,IAAe,IAAXiB,EAEG,CACHC,EAASlB,EACT,MAHAiB,EAAQjB,EAOkD,IAAlEhB,KAAKY,MAAMX,KAAKgC,GAAOE,cAAcnC,KAAKY,MAAMX,KAAKiC,IACrDE,YAAW,WACP,EAAKxC,MAAMC,SAASL,EAAQyC,IAC5B,EAAKrC,MAAMC,SAASL,EAAQ0C,IAC5B,EAAKP,SAAS,CACVE,QAAS,EAAKjB,MAAMiB,QAAU,EAC9BD,MAAQ,EAAKhB,MAAMgB,MAAQ,QAEhC,KAEHQ,YAAW,WACP,EAAKxC,MAAMC,SAASJ,EAASwC,IAC7B,EAAKrC,MAAMC,SAASJ,EAASyC,IAC7B,EAAKP,SAAS,CACVE,QAAS,EAAKjB,MAAMiB,QAAU,EAC9BD,MAAQ,EAAKhB,MAAMgB,MAAQ,OAEhC,Q,+BAuBX,OACI,yBAAKzB,UAAU,mBACX,yBAAKA,UAAU,cACX,0BAAMA,UAAU,aAAhB,UAAoCH,KAAKY,MAAMgB,OAC/C,0BAAMzB,UAAU,aAAhB,kBAA4CH,KAAKY,MAAMiB,UAE3D,yBAAK1B,UAAU,SACVH,KAAKc,cAEV,4BAAQX,UAAU,cAAcC,QAASJ,KAAKoB,OAA9C,gB,GAxFIX,IAAMC,YAsGXC,mBAPf,SAAyBC,GACrB,MAAO,CACHX,KAAOW,EAAMX,KACbK,WAAaM,EAAMN,cAIZK,CAAyBE,G,OCtGlCwB,EAAe,CACjBpC,KAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzCK,WAAa,GA0CjB,IAAMgC,EAAQC,aAvCd,WAAgD,IAA/B3B,EAA8B,uDAAtByB,EAAcG,EAAQ,uCAC3C,OAAOA,EAAOjD,MACV,IAAK,UACD,MAAO,CACHU,KAAOW,EAAMX,KAAKwC,KAAI,SAACC,EAAM5C,GACzB,OAAIA,IAAU0C,EAAOlD,MACV,EAEJoD,KAEXpC,WAAaM,EAAMN,WAAa,GAExC,IAAK,YACD,MAAO,CACHL,KAAOW,EAAMX,KAAKwC,KAAI,SAACC,EAAM5C,GACzB,OAAIA,IAAU0C,EAAOlD,MACV,EAEJoD,KAEXpC,WAAaM,EAAMN,WAAa,GAExC,IAAK,UACD,MAAO,CACHL,KAAOW,EAAMX,KAAKwC,KAAI,SAACC,EAAM5C,GACzB,OAAIA,IAAU0C,EAAOlD,MACV,EAEJoD,KAEXpC,WAAaM,EAAMN,WAAa,GAExC,IAAK,QACD,OAAO+B,EACX,QACI,OAAOzB,MAYnB+B,IAASC,OAAO,mBANJ,kBACR,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,SAIQ,MAASO,SAASC,eAAe,W","file":"static/js/main.824e4546.chunk.js","sourcesContent":["export function faceUp(value) {\r\n    return {\r\n        type : \"FACE_UP\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function matched(value) {\r\n    return {\r\n        type : \"MATCHED\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function faceDown(value) {\r\n    return {\r\n        type : \"FACE_DOWN\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function reset() {\r\n    return {\r\n        type : \"RESET\"\r\n    };\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { faceUp } from './actions.js';\r\nimport \"./css/card.css\";\r\n\r\nclass Card extends React.Component {\r\n\r\n    flipCard = () => {\r\n        this.props.dispatch(faceUp(this.props.index));\r\n    }\r\n\r\n    render() {\r\n        let color;\r\n        if (this.props.deck[this.props.index] === 2) {\r\n            color = {\r\n                backgroundColor: '#2A602A'\r\n            };\r\n        } else {\r\n            color = {\r\n                backgroundColor: '#444489'\r\n            };\r\n        }\r\n        return (\r\n            <button className=\"card\" onClick={this.flipCard} disabled={this.props.deck[this.props.index] !== 0 || this.props.numFlipped >= 2} style={color}>\r\n                {(this.props.deck[this.props.index] !== 0) ? this.props.symbol : \"?\"}\r\n                </button>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        deck : state.deck,\r\n        numFlipped : state.numFlipped\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Card);","import Card from './card.js';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { faceDown, matched, reset } from './actions.js';\r\nimport \"./css/board.css\";\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let cards = [\"☀\", \"☀\", \"☂\", \"☂\",\"☁\", \"☁\", \"☺\", \"☺\", \"♡\", \"♡\", \"♪\", \"♪\"];\r\n        for (let i = 0; i < cards.length; i++) {\r\n            let swapIndex = i + Math.floor(Math.random() * (cards.length - i));\r\n            let temp = cards[i];\r\n            cards[i] = cards[swapIndex];\r\n            cards[swapIndex] = temp;\r\n        }\r\n        this.state = {\r\n            deck : cards,\r\n            score: 0,\r\n            guesses: 0\r\n        }\r\n    }\r\n\r\n    createGrid = () => {\r\n        let grid = [];\r\n        for (let i = 0; i < this.state.deck.length; i++) {\r\n            grid.push(<Card symbol={this.state.deck[i]} index={i} key={i}></Card>);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.numFlipped === 2) {\r\n            let first = -1;\r\n            let second = -1;\r\n            for (let i = 0; i < 12; i++) {\r\n                if (this.props.deck[i] === 1) {\r\n                    if (first === -1) {\r\n                        first = i;\r\n                    } else {\r\n                        second = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (this.state.deck[first].localeCompare(this.state.deck[second]) === 0) {\r\n                setTimeout(() => {\r\n                    this.props.dispatch(matched(first));\r\n                    this.props.dispatch(matched(second));\r\n                    this.setState({\r\n                        guesses: this.state.guesses + 1,\r\n                        score : this.state.score + 200\r\n                    });\r\n                }, 1000);\r\n            } else {\r\n                setTimeout(() => {\r\n                    this.props.dispatch(faceDown(first));\r\n                    this.props.dispatch(faceDown(second));\r\n                    this.setState({\r\n                        guesses: this.state.guesses + 1,\r\n                        score : this.state.score - 50\r\n                    });\r\n                }, 1000);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    reset = () => {\r\n        let cards = [\"☀\", \"☀\", \"☂\", \"☂\",\"☁\", \"☁\", \"☺\", \"☺\", \"♡\", \"♡\", \"♪\", \"♪\"];\r\n        for (let i = 0; i < cards.length; i++) {\r\n            let swapIndex = i + Math.floor(Math.random() * (cards.length - i));\r\n            let temp = cards[i];\r\n            cards[i] = cards[swapIndex];\r\n            cards[swapIndex] = temp;\r\n        }\r\n        this.setState({\r\n            deck : cards,\r\n            score: 0,\r\n            guesses: 0\r\n        });\r\n        this.props.dispatch(reset());\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"centerContainer\">\r\n                <div className=\"scoreBoard\">\r\n                    <span className=\"scoreText\">Score: {this.state.score}</span>\r\n                    <span className=\"scoreText\">Total Guesses: {this.state.guesses}</span>\r\n                </div>\r\n                <div className=\"board\">\r\n                    {this.createGrid()}\r\n                </div>\r\n                <button className=\"resetButton\" onClick={this.reset}>Restart</button>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        deck : state.deck,\r\n        numFlipped : state.numFlipped\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Board);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './game/board.js'\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nconst initialState = {\n    deck : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    numFlipped : 0\n};\n\nfunction reducer(state = initialState, action) {\n    switch(action.type) {\n        case 'FACE_UP':\n            return {\n                deck : state.deck.map((item, index) => {\n                    if (index === action.value) {\n                        return 1;\n                    }\n                    return item;\n                }),\n                numFlipped : state.numFlipped + 1\n            };\n        case 'FACE_DOWN':\n            return {\n                deck : state.deck.map((item, index) => {\n                    if (index === action.value) {\n                        return 0;\n                    }\n                    return item;\n                }),\n                numFlipped : state.numFlipped - 1\n            };\n        case 'MATCHED':\n            return {\n                deck : state.deck.map((item, index) => {\n                    if (index === action.value) {\n                        return 2;\n                    }\n                    return item;\n                }),\n                numFlipped : state.numFlipped - 1\n            };\n        case 'RESET':\n            return initialState;\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(reducer);\n\nconst App = () => (\n    <Provider store={store}>\n        <Board></Board>\n    </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}